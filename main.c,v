head	1.46;
access;
symbols;
locks
	o2-yi:1.46; strict;
comment	@ * @;


1.46
date	2016.10.10.22.32.31;	author o2-yi;	state Exp;
branches;
next	1.45;

1.45
date	2016.10.09.00.17.05;	author o2-yi;	state Exp;
branches;
next	1.44;

1.44
date	2016.10.09.00.10.45;	author o2-yi;	state Exp;
branches;
next	1.43;

1.43
date	2016.10.08.09.24.54;	author o2-yi;	state Exp;
branches;
next	1.42;

1.42
date	2016.10.08.09.17.16;	author o2-yi;	state Exp;
branches;
next	1.41;

1.41
date	2016.10.08.08.04.26;	author o2-yi;	state Exp;
branches;
next	1.40;

1.40
date	2016.10.08.07.24.19;	author o2-yi;	state Exp;
branches;
next	1.39;

1.39
date	2016.10.08.07.22.36;	author o2-yi;	state Exp;
branches;
next	1.38;

1.38
date	2016.10.08.00.33.48;	author o2-yi;	state Exp;
branches;
next	1.37;

1.37
date	2016.10.06.09.13.24;	author o2-yi;	state Exp;
branches;
next	1.36;

1.36
date	2016.10.06.09.11.41;	author o2-yi;	state Exp;
branches;
next	1.35;

1.35
date	2016.10.06.07.47.21;	author o2-yi;	state Exp;
branches;
next	1.34;

1.34
date	2016.10.05.05.19.38;	author o2-yi;	state Exp;
branches;
next	1.33;

1.33
date	2016.10.05.04.52.09;	author o2-yi;	state Exp;
branches;
next	1.32;

1.32
date	2016.10.05.02.48.36;	author o2-yi;	state Exp;
branches;
next	1.31;

1.31
date	2016.10.05.02.46.06;	author o2-yi;	state Exp;
branches;
next	1.30;

1.30
date	2016.10.04.13.00.35;	author o2-yi;	state Exp;
branches;
next	1.29;

1.29
date	2016.10.03.22.15.55;	author o2-yi;	state Exp;
branches;
next	1.28;

1.28
date	2016.10.03.21.58.19;	author o2-yi;	state Exp;
branches;
next	1.27;

1.27
date	2016.10.03.21.54.04;	author o2-yi;	state Exp;
branches;
next	1.26;

1.26
date	2016.10.03.05.37.24;	author o2-yi;	state Exp;
branches;
next	1.25;

1.25
date	2016.10.03.04.12.12;	author o2-yi;	state Exp;
branches;
next	1.24;

1.24
date	2016.10.02.21.53.02;	author o2-yi;	state Exp;
branches;
next	1.23;

1.23
date	2016.10.02.08.43.59;	author o2-yi;	state Exp;
branches;
next	1.22;

1.22
date	2016.10.02.04.28.08;	author o2-yi;	state Exp;
branches;
next	1.21;

1.21
date	2016.10.02.04.19.05;	author o2-yi;	state Exp;
branches;
next	1.20;

1.20
date	2016.09.30.22.44.12;	author o2-yi;	state Exp;
branches;
next	1.19;

1.19
date	2016.09.27.07.58.56;	author o2-yi;	state Exp;
branches;
next	1.18;

1.18
date	2016.09.17.14.18.50;	author o2-yi;	state Exp;
branches;
next	1.17;

1.17
date	2016.09.16.12.20.35;	author o2-yi;	state Exp;
branches;
next	1.16;

1.16
date	2016.09.16.12.04.32;	author o2-yi;	state Exp;
branches;
next	1.15;

1.15
date	2016.09.16.12.03.46;	author o2-yi;	state Exp;
branches;
next	1.14;

1.14
date	2016.09.16.12.02.44;	author o2-yi;	state Exp;
branches;
next	1.13;

1.13
date	2016.09.14.21.49.20;	author o2-yi;	state Exp;
branches;
next	1.12;

1.12
date	2016.09.14.18.35.38;	author o2-yi;	state Exp;
branches;
next	1.11;

1.11
date	2016.09.14.18.01.02;	author o2-yi;	state Exp;
branches;
next	1.10;

1.10
date	2016.09.14.17.59.08;	author o2-yi;	state Exp;
branches;
next	1.9;

1.9
date	2016.09.14.16.08.00;	author o2-yi;	state Exp;
branches;
next	1.8;

1.8
date	2016.09.14.16.03.25;	author o2-yi;	state Exp;
branches;
next	1.7;

1.7
date	2016.09.14.15.46.15;	author o2-yi;	state Exp;
branches;
next	1.6;

1.6
date	2016.09.14.15.34.24;	author o2-yi;	state Exp;
branches;
next	1.5;

1.5
date	2016.02.11.00.40.33;	author o3-yi;	state Exp;
branches;
next	1.4;

1.4
date	2016.02.10.18.03.50;	author o3-yi;	state Exp;
branches;
next	1.3;

1.3
date	2016.02.10.17.55.01;	author o3-yi;	state Exp;
branches;
next	1.2;

1.2
date	2016.02.10.15.44.32;	author o3-yi;	state Exp;
branches;
next	1.1;

1.1
date	2016.02.10.13.43.26;	author o3-yi;	state Exp;
branches;
next	;


desc
@init
@


1.46
log
@fixing log
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include "log.h"
#include "pcb.h"


//global var
int shmid;
int turn_id;
char *fname = "test.out";

//prototype for signal handler
void sig_handler(int signo);
void kill_shm();

int 
main(int argc, char *argv[]){
	//init var
	int c, hflag, sflag, lflag, iflag, tflag;
	
	//char *fname = "test.out";	//for -l switch, default is logfile.txt
	int option_index = 0;		//for getopt_long
	int err_flag = 0;		//for getopt_long
	char *strbuff = "3";		//handling default value for -n

	char *endptr;			//for strtol
	long value;			//for strtol

	int pid = getpid();		//for pid
	int sig_num;			//for signal
	int temp_pid;

	int i;				//process nth number
	long process_num = 5;		//number of process
	char *max_writes = "3";		//maximum number of writing
	long timer = 20;		//time to terminate
	char text[20];

	//int shmid;
	int *shmptr;
	pcb *p;

	signal(SIGINT, sig_handler);	//handling signal

	opterr = 0;

	//initialize flags
	hflag = 0;
	sflag = 0;
	lflag = 0;
	iflag = 0;
	tflag = 0;

	//declare long options
	struct option options[] = {
		{"help", 0, 0, 'h'},
		{0,0,0,0}
	};

	//getopt_long will be used to accept long switch
	//short ones will be h,n,l
	if (argc >1){
		while(( c = getopt_long(argc,argv, ":hs:l:i:t:", options,&option_index)) != -1)
			switch (c)
				{
					//-h, --help for information about switch
					case 'h':
						hflag = 1;
						break;
					//-n to print different integer on the logfile
					case 's':
						sflag = 1;

						//strtol to check int or not
						value = strtol(optarg,&endptr, 10);
						if(*endptr !='\0')
							{
								printf("master : you must type digits after -s, not %s",stderr);
								return 1;
							}
						process_num = value;
						if(process_num > MAXP)
							{
								fprintf(stderr,"master : cannot spawn more than %s processes\n",MAXP);
								return 1;
							}
						break;
					//-l to change logfile name
					case 'l':
						lflag = 1;
						if(strncmp(optarg,"-",1) == 0)
							{
								perror("master : you must type file name after -l switch.");
								return 1;
							}
						fname = (char*) malloc(strlen(optarg)+1);
						strcpy(fname,optarg);
						break;
					//-i switch for max_write
					case 'i':
						iflag = 1;
						value = strtol(optarg,&endptr,10);
						if(*endptr != '\0')
							{
								printf("master you must type digits after -i, not %s",stderr);
								return 1;
							}
						max_writes = (char *)malloc(strlen(optarg)+1);
						strcpy(max_writes,optarg);
						break;
					//-t for timer
					case 't':
						tflag = 1;
						value = strtol(optarg,&endptr,10);
						if(*endptr != '\0')
							{
								printf("master : you must type digits after -t, not %s",stderr);
								return 1;
							}
						timer = value;
						break;
					//errors in getopt
					case '?':
						err_flag = 1;
						printf("Unknown option : -%c is found\n", optopt);
						break;
				}
	}
	//if errflag is on, just exit
	if (err_flag ==1)
		{
			return 1;
		}

	//if iflag is on
	//print simple definition and then term
	if (hflag == 1)
		{
			printf("this program is designed for testing log library function\n");
			printf("-h --help\n print options\n");
			printf("-s [value]\n to spawn [value] of slave processes\n");
			printf("-l [filename]\n change logfile name to [filename]\n");
			printf("-i [value]\n change maximum number of writing for slave process to [value]\n");
			printf("-t [value]\n change the termination timer for master process to [value] second\n");
			return 0;
		}

	//shmget to create shared memories
	//first one for counting
	//second for the algorithm
        if ((shmid = shmget((key_t)12348888, sizeof(int), 0600|IPC_CREAT)) == -1)
                {
                        perror("master : fail to create a shared memory\n");
                        create_log("master : fail to create a shared memory\n");
                        savelog(fname);
                        return 1;
                }
        else
                {
                        create_log("master : created a shared memory");
                        savelog(fname);
                        clearlog();
                }

        if ((turn_id = shmget((key_t)88881234, sizeof(int)*20, 0600|IPC_CREAT)) == -1)
                {
                        perror("master : fail to create a shared memory for the peterson algorithm\n");
                        create_log("master : fail to create a shared memory for the peterson algorithm\n");
                        savelog(fname);
                        return 1;
                }
        else
                {
                        create_log("master : created a second shared memory");
                        savelog(fname);
                        clearlog();
                }

	//attatching shared memories
        if ((shmptr = shmat (shmid, NULL, 0)) == -1)
                {
                        perror("master : fail to attatch the shared memory\n");
                        create_log("master : fail to attatch the shared memory");
                        savelog(fname);
                        return 1;
                }
        else
                {
                        create_log("master : success to attatch the shared memory");
                        savelog(fname);
			clearlog();
                }

        if ((p = (pcb *)shmat(turn_id,NULL,0)) == -1)
                {
                        perror("master : fail to attatch the second shared memory\n");
                        create_log("master : fail to attatch the second shared memory");
                        savelog(fname);
                        return 1;
                }
        else
                {
                        create_log("master : success to attatch the second shared memory");
                        savelog(fname);
			clearlog();
                }



	//init pcb
	int k;
	for (k = 0; k<MAXP; k++)
		{
			p->pid[k] = -1;
			p->flag[k] = 0;
		}

	//assign master process to 0th slot
	p->pid[0] = pid;
	p->num_proc = process_num+1;
	i = 0;
	
	//initialize shmptr to 0
	int *cal_num;
	cal_num = (int *) shmptr;
	*cal_num = 0;

	//forking
	for(k = 1; k<process_num+1; k++)
		{
			fflush(stdout);
			create_log("master : forking a child process");
			savelog(fname);
			clearlog();
			temp_pid = fork();
			if (temp_pid == -1)
				{
					perror("master : fail to fork a child process\n");
					create_log("master : fail to fork a child process");
					savelog(fname);
					return 1;
				}
			else if(temp_pid == 0)
				{
					if (lflag == 1)
						{
							snprintf(text,sizeof(text), "%d", k);
							//
							if((execl("./slave", "slave",text, "-i", max_writes, "-l", fname, NULL)) == -1)
								{
									perror("slave : fail to exec the process image\n");
									create_log("slave : fail to exec the process image");
									savelog(fname);
									return 1;
								}
						}
					else
						{
							snprintf(text,sizeof(text), "%d", k);
							//place for child
							//exec
							if((execl("./slave", "slave",text , "-i", max_writes,"-l",fname, NULL)) == -1)
								{
									//getting error 
									perror("slave : fail to exec the process image\n");
									create_log(" slave: fail to exec the process image");
									savelog(fname);
									return 1;
								}
						}
				}
			else
				{
					p->pid[k] = temp_pid;
				}
		}

	//sleep
	sleep(timer);
	//do termination
	for (k = 1; k < process_num+1;k++)
		{
			kill(p->pid[k], SIGKILL);
		}
	kill_shm();
	create_log("master : terminate program");
	savelog(fname);
	return 0;
}

//signal handler
void 
sig_handler(int signo)
{
	fprintf(stderr, "master : receive a signal to terminate");
	create_log("master : receive a signal to terminate");
	savelog(fname);
	clearlog();
	kill_shm();
	sleep(1);
	exit (1);
}

//function for killing a shared memory
void 
kill_shm()
{
	if((shmctl(shmid, IPC_RMID, 0)) == -1)
		{
			perror("master : fail to kill the shared memory\n");
			create_log("master : fail to kill the shared memory");
			savelog(fname);
			clearlog();
		}
	else
		{
			fprintf(stderr,"master : success to kill the shared memory\n");
			create_log("master : success to kill the shared memory");
			savelog(fname);
			clearlog();
		}
	if((shmctl(turn_id, IPC_RMID, 0)) == -1)
		{
			perror("master : fail to kill the second shared memory\n");
			create_log("master : fail to kill the second shared memory");
			savelog(fname);
			clearlog();
		}
	else
		{
			fprintf(stderr,"master : success to kill the second shared memory\n");
			create_log("master : success to kill the second shared memory");
			savelog(fname);
			clearlog();
		}
}
@


1.45
log
@*** empty log message ***
@
text
@a51 51
	//create a shared memory
	if ((shmid = shmget((key_t)12348888, sizeof(int), 0600|IPC_CREAT)) == -1)
		{
			perror("master : fail to create a shared memory\n");
			create_log("master : fail to create a shared memory\n");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : created a shared memory");
		}

	if ((turn_id = shmget((key_t)88881234, sizeof(int)*20, 0600|IPC_CREAT)) == -1)
		{
			perror("master : fail to create a shared memory for the peterson algorithm\n");
			create_log("master : fail to create a shared memory for the peterson algorithm\n");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : created a second shared memory");
		}
	
	//attatching shared memory
	//first shm for data
	if ((shmptr = shmat (shmid, NULL, 0)) == -1)
		{
			perror("master : fail to attatch the shared memory\n");
			create_log("master : fail to attatch the shared memory");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : success to attatch the shared memory");
		}
	//second for the algorithm
	if ((p = (pcb *)shmat(turn_id,NULL,0)) == -1)
		{
			perror("master : fail to attatch the second shared memory\n");
			create_log("master : fail to attatch the second shared memory");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : success to attatch the second shared memory");
		}

d154 63
a216 1
	
d239 3
d293 2
d304 2
a306 1
	savelog(fname);
d319 2
d326 2
d333 2
d340 2
@


1.44
log
@peeeeeeeeeeeeteeeeeeeeeeeeeeerssoooooooooooooooooooooooon!!!!
@
text
@a209 2
			p->choosing[k] = 0;
			p->number[k] = 0;
@


1.43
log
@*** empty log message ***
@
text
@d213 1
d218 1
@


1.42
log
@*** empty log message ***
@
text
@d140 5
@


1.41
log
@fixed shared memory
@
text
@d235 1
@


1.40
log
@*** empty log message ***
@
text
@d215 3
a217 1
	shmptr = 0;
@


1.39
log
@*** empty log message ***
@
text
@a244 1
							fprintf(stderr,text);
@


1.38
log
@convert all printf to fprintf w/ stderr
@
text
@d220 1
d245 1
a245 1
							printf(text);
@


1.37
log
@*** empty log message ***
@
text
@d27 1
a28 1
	char *e;			//for strtol
d53 1
a53 1
	if ((shmid = shmget((key_t)1234, sizeof(int), 0600|IPC_CREAT)) == -1)
d65 1
a65 1
	if ((turn_id = shmget((key_t)8888, sizeof(int)*20, 0600|IPC_CREAT)) == -1)
d243 2
a244 1
							sprintf(text, "%d", k);
d278 1
a278 1
	printf("master : receive a signal to terminate");
d297 1
a297 1
			printf("master : success to kill the shared memory\n");
d307 1
a307 1
			printf("master : success to kill the second shared memory\n");
@


1.36
log
@*** empty log message ***
@
text
@d233 1
a233 1
							if((execl(".slave", "slave",text, "-i", max_writes, "-l", fname, NULL)) == -1)
@


1.35
log
@fixing
@
text
@d233 1
a233 1
							if((execl(".slave", "slave", "-i", max_writes, "-l", "fname", NULL)) == -1)
d246 1
a246 1
							if((execl("./slave", "slave",text , "-i", max_writes, NULL)) == -1)
@


1.34
log
@fixing err
@
text
@d44 1
d243 1
d246 1
a246 1
							if((execl("./slave", "slave", "-i", max_writes, NULL)) == -1)
@


1.33
log
@*** empty log message ***
@
text
@d17 1
d27 1
a27 1
	char *fname = "test.out";	//for -l switch, default is logfile.txt
@


1.32
log
@*** empty log message ***
@
text
@d8 2
d25 1
a25 1
	int c, hflag, sflag, lflag, iflag tflag;
@


1.31
log
@*** empty log message ***
@
text
@d229 1
a229 1
							if((execl(".slave", "slave", max_writes, "-l", "fname", NULL)) == -1)
d241 1
a241 1
							if((execl("./slave", "slave", max_writes, NULL)) == -1)
@


1.30
log
@*** empty log message ***
@
text
@d226 1
a226 3
					//place for child
					//exec
					if((execl("./slave", "slave", max_writes, NULL)) == -1)
d228 21
a248 5
							//getting error 
							perror("slave : fail to exec the process image\n");
							create_log(" slave: fail to exec the process image");
							savelog(fname);
							return 1;
@


1.29
log
@*** empty log message ***
@
text
@d201 2
a202 2
			p->choosing[k] = -1;
			p->number[k] = -1;
d210 3
@


1.28
log
@*** empty log message ***
@
text
@d24 1
a24 1
	char *fname = "logfile.txt";	//for -l switch, default is logfile.txt
@


1.27
log
@*** empty log message ***
@
text
@d28 1
a28 1
	char *strbuff = "42";		//handling default value for -n
d39 1
a39 1
	long max_writes = 3;		//maximum number of writing
d157 2
a158 2
						strbuff = (char *)malloc(strlen(optarg)+1);
						strcpy(strbuff,optarg);
d225 1
a225 1
					if((execl("./slave", "slave", strbuff, NULL)) == -1)
@


1.26
log
@working
combine 2nd 3rd shm 
add bakery algo
add pcb.h
fix fork
@
text
@d23 1
a23 1
	int c, hflag, nflag, lflag;
d37 4
a40 2
	int i;
	int process_num = 19;		//number of process
d43 1
a43 1
	char *shmptr;
d49 1
a49 1
	if ((shmid = shmget((key_t)1234, sizeof(char)*1024, 0600|IPC_CREAT)) == -1)
d103 1
a103 1
	nflag = 0;
d105 2
d117 1
a117 1
		while(( c = getopt_long(argc,argv, ":hn:l:", options,&option_index)) != -1)
d125 2
a126 3
					case 'n':
						nflag = 1;
						printf("%s\n",optarg);
d132 1
a132 1
								printf("test : you must type digits after -n, not %s",stderr);
d135 1
a135 2
						strbuff = (char *)malloc(strlen(optarg)+1);
						strcpy(strbuff,optarg);
d142 1
a142 1
								perror("test : you must type file name after -l switch.");
d148 23
d190 1
a190 1
			printf("-n [value]\n to print [value] on the logfile\n");
d192 3
a194 22
		}
	else
		{
			create_log(strbuff);
			//if no switch
			//just test the loglib
			//next 3 lines will test addmsg func
			create_log("TEST : this is test msg");
			create_log("TEST : this is test msg for queue");
			create_log("TEST : this is test msg for clearfunc");
	
			savelog(fname);
	
			//next 2 lines will test getlog func
			char *strings = getlog();
			printf("%s", strings);


			//next 3 will test clearlog func
			clearlog();
			strings = getlog();
			printf("%s", strings);
d211 1
a211 1
	for(k = 1; k<MAXP; k++)
d225 1
a225 1
					if((execl("./slave", "slave")) == -1)
d240 4
a243 2
	//bakery
	while(1)
d245 1
a245 29
			p->choosing[i] = true;
			p->number[i] = 1 + max((((((((((((((((((p->number[0],p->number[1]),
			p->number[2]),
			p->number[3]),
			p->number[4]),
			p->number[5]),
			p->number[6]),
			p->number[7]),
			p->number[8]),
			p->number[9]),
			p->number[10]),
			p->number[11]),
			p->number[12]),
			p->number[13]),
			p->number[14]),
			p->number[15]),
			p->number[16]),
			p->number[17]),
			p->number[18]);
			p->choosing[i] = false;
			int j;
			for (j = 0; j<n; j++)
				{
					while(p->choosing[j]);
					while((p->number[j]) && (p->number[j],j)<(p->number[i],i));
				}
			//crit
			p->number[i] = 0;
			//remainder
d247 1
a247 1

@


1.25
log
@*** empty log message ***
@
text
@d33 1
a33 1
	int pid;			//for pid
d35 1
d37 1
a37 1
	int index;
d190 9
d200 3
a202 2
	//fork
	pid = fork();
d204 2
a205 8
	if (pid == -1)
		{
			perror("master : fail to fork a child process\n");
			create_log("master : fail to fork a child process");
			savelog(fname);
			return 1;
		}
	else if(pid == 0)
d207 2
a208 3
			//place for child
			//exec
			if((execl("./slave", "slave")) == -1)
d210 2
a211 3
					//getting error 
					perror("slave : fail to exec the process image\n");
					create_log(" slave: fail to exec the process image");
d215 17
d233 3
a235 1
	else
d237 22
a258 2
			//place for parent 
			while(1)
d260 2
a261 12
					pcb->choosing[i] = true;
					pcb->number[i] = 1 + max(number[0]...);
					pcb->choosing[i] = false;
					int j;
					for (j = 0; j<n; j++)
						{
							while(pcb->choosing[j]);
							while((pcb->number[j]) && (number[j],j)<(number[i],i));
						}
					//crit
					number[i] = 0;
					//remainder
d263 3
@


1.24
log
@adding flag, so now i have 3 shm
@
text
@d9 2
a14 1
int flags_id;
d37 1
d41 1
a41 2
	int *turn_ptr;
	int *flags_ptr;
a69 12
	if ((flags_id = shmget((key_t)4321, sizeof(int)*20, 0600|IPC_CREAT)) == -1)
		{
			perror("master : fail to create third shared memory\n");
			create_log("master : fail to create third shared memory)");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : created thid shared memory");
		}

d71 1
d83 2
a84 1
	if ((turn_ptr = shmat(turn_id,NULL,0)) == -1)
a95 12
	if((flags_ptr = shmat(flags_id,NULL,0)) == -1)
		{
			perror(" master : fail to attatch third shared memory\n");
			create_log("master : fail to attatch third shared memory");
			savelog(fname);
			return 1;
		}
	else
		{
			create_log("master : success to attatch third shared memory");
		}

d216 15
a270 10
		}
	if((shmctl(turn_id, IPC_RMID, 0)) == -1)
		{
			printf("master : success to kill third shared memory\n");
			create_log("master : success to kill shird shared memory");
		}
	else
		{
			printf("master : success to kill third shared memory\n");
			create_log("master : success to kill third shared memory");
@


1.23
log
@put another shm
@
text
@d13 1
d35 2
d40 1
d68 12
d105 12
d277 10
@


1.22
log
@working for shm
@
text
@d12 1
d36 1
d40 2
a41 1
	if ((shmid = shmget((key_t)1234, sizeof(int), 0700|IPC_CREAT)) == -1)
d53 13
d77 11
d150 1
d214 1
d220 1
d226 1
d233 1
a233 1
			create_log("master : fail to kill the shared memory\n");
d238 11
a248 1
			create_log("master : success to kill the shared memory\n");
@


1.21
log
@working shm
@
text
@d10 3
d15 1
d33 1
a33 1
	int shmid;
d186 2
a187 1
void sig_handler(int signo)
d194 15
@


1.20
log
@worked for fork/exec
@
text
@d29 3
d33 24
@


1.19
log
@working for p2
just adding & testing signal func
@
text
@d10 1
d26 2
a27 2
	int pid;
	int sig_num;
d29 1
a29 5
	signal(SIGINT, sig_handler);
	while(1)
	{

	}
d124 28
d157 3
a159 1
	printf("hi");
@


1.18
log
@adding missing comments
@
text
@d6 2
d10 2
d25 8
d128 7
@


1.17
log
@n is working now
@
text
@d15 2
a16 2
	int err_flag = 0;
	char *strbuff = "42";
d18 2
a19 2
	char *endptr;
	long value;
d41 1
d45 1
d49 2
d60 1
d71 1
d78 1
a78 1
	
d89 1
a89 1
			printf("-n \n");
@


1.16
log
@*** empty log message ***
@
text
@d18 3
d46 3
a48 6
						if(isdigit(optarg))
							{
								strbuff = (char*) malloc(strlen(optarg)+1);
								strcpy(strbuff, optarg);
							}
						else
d50 1
a50 1
								perror("test : you must type digits after -n");
d53 2
@


1.15
log
@*** empty log message ***
@
text
@a11 1
	int n_digit = 42;		//for -n switch
d16 1
a16 1
	char *strbuff;
@


1.14
log
@working on -n
@
text
@d46 1
a46 1
								strbuff = (char*) malloc(optarg)+1);
@


1.13
log
@fixing some missing stuffs
-n is still working
@
text
@d12 1
a12 1
	int log_timer = 1;		//for -n switch
d17 1
d44 1
a44 2
						log_timer = atoi(optarg);
						if(log_timer < 1)
d46 6
a51 1
								perror("test : log timer must grater than 0");
d87 1
@


1.12
log
@-l is finished
-h is finished
-n is incomplete
@
text
@d35 1
a35 1
		while(( c = getopt_long(argc,argv, ":h:n:l:", options,&option_index)) != -1)
d43 6
a48 1
						printf("%s opt is b\n",optarg);
@


1.11
log
@finish -l switch
@
text
@a39 1
						printf("%s opt\n",optarg);
d47 5
d71 3
@


1.10
log
@*** empty log message ***
@
text
@d48 2
a49 1
						printf("optarg is %sn .\n",optarg);
@


1.9
log
@added error flag
@
text
@d18 3
d28 2
a29 1
		{"help", 0, 0, 'h'}
d35 1
a35 1
		while(( c = getopt_long(argc,argv, ":h:n:l", options,&option_index)) != -1)
d40 1
d44 1
d48 1
@


1.8
log
@*** empty log message ***
@
text
@d16 1
d44 2
a45 1
						printf("Unknown option : %s is found\n", optopt);
d50 4
@


1.7
log
@replace getopt to getopt long
@
text
@d11 1
a11 1
	int c, hflag, nflag, lfag;
d42 2
a43 1
					default:
@


1.6
log
@rcs for "NEW" edited main.c
main is required to change for accepting new switches
@
text
@d5 1
d11 5
a15 1
	int c, hflag;
d17 12
a28 5
	iflag =0;
	//getopt
	//will use just iflag
	//no error checking
	//just simple and basic one 
d30 1
a30 1
		while(( c = getopt(argc,argv, ":i")) != -1)
d33 8
a40 2
					case 'i':
						iflag = 1;
d49 1
a49 1
	if (iflag == 1)
d62 1
a62 1
			savelog("log.txt");
@


1.5
log
@fix getopt
@
text
@d10 1
a10 1
	int c, iflag;
@


1.4
log
@tried to follow GNU coding standard
@
text
@d4 1
d12 1
d18 1
a18 1
		while(( c = getopt(argc,argv, ":i:")) != -1)
@


1.3
log
@*** empty log message ***
@
text
@d6 2
a7 1
int main(int argc, char *argv[]){
d29 4
a32 3
	if (iflag == 1){
		printf("this program is designed for testing log library function\n");
	}
d34 7
a40 7
	{
		//if no switch
		//just test the loglib
		//next 3 lines will test addmsg func
		create_log("TEST : this is test msg");
		create_log("TEST : this is test msg for queue");
		create_log("TEST : this is test msg for clearfunc");
d42 1
a42 1
		savelog("log.txt");
d44 4
a47 3
		//next 2 lines will test getlog func
		char *strings = getlog();
		printf("%s", strings);
d49 5
a54 5
		//next 3 will test clearlog func
		clearlog();
		strings = getlog();
		printf("%s", strings);
	}
@


1.2
log
@fixing some errors
@
text
@d39 3
a41 1
		
d45 1
@


1.1
log
@Initial revision
@
text
@d1 1
d6 19
a24 1
int main(int argc, char **argv){
d26 23
@
